// Load properties file
def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def projectProperties = new Properties()
def projectPropertiesFile = rootProject.file('project.properties')
if (projectPropertiesFile.exists()) {
    projectPropertiesFile.withReader('UTF-8') { reader ->
        projectProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

// Fetch values
def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def flutterMinSdkVersion = projectProperties.getProperty('flutter.minSdkVersion')
if (flutterMinSdkVersion == null) {
    flutterMinSdkVersion = '16'
}

def flutterTargetSdkVersion = projectProperties.getProperty('flutter.targetSdkVersion')
if (flutterTargetSdkVersion == null) {
    flutterTargetSdkVersion = '30'
}

def flutterCompileSdkVersion = projectProperties.getProperty('flutter.compileSdkVersion')
if (flutterCompileSdkVersion == null) {
    flutterCompileSdkVersion = '30'
}

def projectApplicationId = projectProperties.getProperty('project.applicationId')
if (projectApplicationId == null) {
    projectApplicationId = 'com.moab.linksys.app'
}

apply plugin: 'com.android.application'
// START: FlutterFire Configuration
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
// END: FlutterFire Configuration
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion flutter.compileSdkVersion

    compileOptions {
        // flutter local notifications - Flag to enable support for the new language APIs
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId projectApplicationId
        minSdkVersion flutterMinSdkVersion.toInteger()
        targetSdkVersion flutterTargetSdkVersion.toInteger()
        compileSdkVersion flutterCompileSdkVersion.toInteger()
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    signingConfigs {
        debug {
            storeFile file("../debug_keystore.keystore")
            storePassword "Linksys123!"
            keyAlias "LinksysDebug"
            keyPassword "Linksys123!"
        }
    }

    buildTypes {
        release {
            def propsFilePath = '/opt/build/release-signing.properties'
            def propsFile = file(propsFilePath)
            if (file(propsFile).exists()) {
                println('Build with server keystore')
                def props = new Properties()
                propsFile.withReader { reader ->
                    props.load(reader)
                }

                signingConfigs {
                    release {
                        keyAlias = props.get('keyAlias')
                        keyPassword = props.get('keyPassword')
                        storeFile = file("/opt/build/keystore.release")
                        storePassword = props.get('storePassword')
                    }
                }
                signingConfig signingConfigs.release
            } else {
                signingConfig signingConfigs.debug
            }
            // applicationVariants.all { variant ->
            //     variant.outputs.all {
            //         def appName = "moab"
            //         def buildType = variant.buildType.name
            //         def newName
            //         newName = "${appName}-${defaultConfig.versionName}-${buildType}.apk"
            //         outputFileName = newName
            //     }
            // }
        }
    }

    signingConfigs {
        debug {
            storeFile file("../debug_keystore.keystore")
            storePassword "Linksys123!"
            keyAlias "LinksysDebug"
            keyPassword "Linksys123!"
        }
    }

    lintOptions {
        checkReleaseBuilds false //<- add this line
    }
}

flutter {
    source '../..'
}

dependencies {
    
    // For flutter local notifications
    dependencies {
       coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'
    }
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation 'com.google.android.gms:play-services-auth:20.2.0'
    implementation 'com.google.android.gms:play-services-auth-api-phone:18.0.1'
}
