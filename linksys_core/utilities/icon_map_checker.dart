import 'dart:convert';
import 'dart:io';

const tagName = 'Name';
const tagType = 'Type';

void main() {
  RegExp regex = RegExp(r'"(Name=.*),(Type=.*)":[\S\s]"(.*)"');
  // rename and map to Map Entities
  final iconMapEntitiesTransform =
      regex.allMatches(iconMapString).map((element) {
    final name = element.group(1)?.replaceAll('$tagName=', '').toLowerCase();
    final type = element.group(2)?.replaceAll('$tagType=', '');
    final value = element.group(3) ?? '';
    return MapEntry('${name}$type', value);
  }).toList()
        ..removeWhere((element) => element.value.isEmpty)
        ..map((e) => MapEntry(e.key, int.parse(e.value, radix: 16))).toList();
  final Map<String, dynamic> icons = {}..addEntries(iconMapEntitiesTransform);
  final Map<String, dynamic> iconJson = jsonDecode(iconMapString);
  iconJson['icons'] = icons;
  print(iconJson);

  final String iconSetName = iconJson['name'];

  final iconDataFile =
      File('./lib/icons/${convertToFileName(iconSetName)}.dart');
  if (!iconDataFile.existsSync()) {
    iconDataFile.createSync(recursive: true);
  }
  final enumString = '''
  // This is generated by icon_map_checker.dart
  import 'package:flutter/widgets.dart';
  import 'package:equatable/equatable.dart';
  import 'package:linksys_core/utils/named.dart';
  
  enum $iconSetName {
    ${icons.keys.join(',\n\t\t')}
  }
  ''';
  final jsonString = '''
  const json$iconSetName = {${icons.entries.map((e) => '"${e.key}": 0x${e.value}').toList().join(',\n\t\t')}};
  ''';

  final className = '${iconSetName}CharactersData';
  final classString = '''
  class $className extends Equatable {
    static const fontFamily = $iconSetName;
    
    const $className({
      ${icons.keys.map((e) => 'required this.$e').join(',\n\t\t')}
    });

    factory $className.regular() => $className(
      ${icons.keys.map((e) => '$e : IconData(json$iconSetName[\'$e\']!, fontFamily: \'$iconSetName\', fontPackage: \'linksys_core\')').join(',\n\t\t')}
    );

    ${icons.keys.map((e) => 'final IconData $e').join(';\n\t\t')};
    
    @override
    List<Named<IconData>?> get props => [
        ${icons.keys.map((e) => '$e.named(\'$e\')').join(',\n\t\t')}
      ];
  }
  ''';
  final contents = '$enumString\n$jsonString\n$classString';
  iconDataFile.writeAsStringSync(contents);
}

String convertToFileName(String value) {
  var result = value;
  RegExp regex = RegExp(r'[A-Z]{1}');

  regex.allMatches(value).forEach((element) {
    final upper = element.group(0);
    result = result.replaceFirst(upper ?? '', '_${upper?.toLowerCase() ?? ''}');
  });
  if (result.indexOf('_') == 0) {
    result = result.replaceFirst('_', '');
  }
  return result;
}

// Put icon map json file here
const iconMapString = '''
  {
  "name": "LinksysIcons",
  "icons": {
    "Name=Calendar,Type=Default": "ea01",
    "Name=Options,Type=Default": "ea02",
    "Name=Copy,Type=Default": "ea03",
    "Name=QRCode,Type=Default": "ea04",
    "Name=SMS,Type=Default": "ea05",
    "Name=Mail,Type=B": "ea06",
    "Name=Administration,Type=B": "ea07",
    "Name=Priority,Type=Default": "ea08",
    "Name=Filter,Type=Default": "ea09",
    "Name=Administration,Type=Default": "ea0a",
    "Name=Profile,Type=Round": "ea0b",
    "Name=Policy,Type=Default": "ea0c",
    "Name=Share,Type=iOS": "ea0d",
    "Name=Status,Type=On": "ea0e",
    "Name=Status,Type=Off": "ea0f",
    "Name=Flag,Type=Canada": "ea10",
    "Name=Flag,Type=UK": "ea11",
    "Name=Flag,Type=UnitedStates": "ea12",
    "Name=Support,Type=Default": "ea13",
    "Name=Restart,Type=Default": "ea14",
    "Name=Flag,Type=SouthAmerica": "ea15",
    "Name=Flag,Type=Asia": "ea16",
    "Name=SignalStrength,Type=Wired": "ea17",
    "Name=SignalStrength,Type=4": "ea18",
    "Name=SignalStrength,Type=0": "ea19",
    "Name=SignalStrength,Type=3": "ea1a",
    "Name=SignalStrength,Type=2": "ea1b",
    "Name=SignalStrength,Type=1": "ea1c",
    "Name=Devices,Type=Default": "ea1d",
    "Name=Nodes,Type=Default": "ea1e",
    "Name=Upload,Type=Default": "ea1f",
    "Name=Download,Type=Default": "ea20",
    "Name=Disable,Type=Round": "ea21",
    "Name=Health,Type=Default": "ea22",
    "Name=Settings,Type=Default": "ea23",
    "Name=Home,Type=Default": "ea24",
    "Name=Check,Type=Default": "ea25",
    "Name=Check,Type=Round": "ea26",
    "Name=Help,Type=Round": "ea27",
    "Name=Arrow,Type=Down": "ea28",
    "Name=Shield,Type=Default": "ea29",
    "Name=Chevron,Type=Left": "ea2a",
    "Name=Chevron,Type=Right": "ea2b",
    "Name=Chevron,Type=Up": "ea2c",
    "Name=Chevron,Type=Down": "ea2d",
    "Name=Profile,Type=Default": "ea2e",
    "Name=Cross,Type=Default": "ea2f",
    "Name=Add,Type=Default": "ea30",
    "Name=Bell,Type=Default": "ea31",
    "Name=Show,Type=Default": "ea32",
    "Name=Bell,Type=B": "ea33",
    "Name=Wifi,Type=Default": "ea34",
    "Name=Hide,Type=Default": "ea35",
    "Name=Refresh,Type=Default": "ea36",
    "Name=Arrow,Type=Right": "ea37",
    "Name=More,Type=Horizontal": "ea38",
    "Name=Search,Type=Default": "ea39",
    "Name=Arrow,Type=Left": "ea3a",
    "Name=Clock,Type=Round": "ea3b",
    "Name=Edit,Type=Default": "ea3c",
    "Name=Arrow,Type=Up": "ea3d",
    "Name=Info,Type=Round": "ea3e",
    "Name=Security,Type=Default": "ea3f",
    "Name=More,Type=Vertical": "ea40",
    "Name=Grabber,Type=Default": "ea41",
    "Name=Cross,Type=Round": "ea42",
    "Name=Stop,Type=Round": "ea43",
    "Name=Radio,Type=Off": "ea44",
    "Name=Circle,Type=On": "ea45",
    "Name=Share,Type=Default": "ea46",
    "Name=Bug,Type=Default": "ea47",
    "Name=Danger,Type=Default": "ea48",
    "Name=Bot,Type=Default": "ea49",
    "Name=Play,Type=Round": "ea4a",
    "Name=Pause,Type=Round": "ea4b",
    "Name=Ethernet,Type=Default": "ea4c",
    "Name=SignalStrength,Type=Wired2": "ea4d"
  }
}
  ''';
