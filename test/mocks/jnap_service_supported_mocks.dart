// Mocks generated by Mockito 5.4.4 from annotations
// in privacy_gui/test/mocks/mockito_specs/jnap_service_supported_spec.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:mockito/mockito.dart' as _i1;
import 'package:privacy_gui/core/jnap/actions/jnap_service_supported.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ServiceHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockServiceHelper extends _i1.Mock implements _i2.ServiceHelper {
  bool isSupportGuestNetwork([List<String>? services]) => (super.noSuchMethod(
        Invocation.method(
          #isSupportGuestNetwork,
          [services],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool isSupportLedMode([List<String>? services]) => (super.noSuchMethod(
        Invocation.method(
          #isSupportLedMode,
          [services],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool isSupportNodeFirmwareUpdate([List<String>? services]) =>
      (super.noSuchMethod(
        Invocation.method(
          #isSupportNodeFirmwareUpdate,
          [services],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool isSupportHealthCheck([List<String>? services]) => (super.noSuchMethod(
        Invocation.method(
          #isSupportHealthCheck,
          [services],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool isSupportProduct([List<String>? services]) => (super.noSuchMethod(
        Invocation.method(
          #isSupportProduct,
          [services],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool isSupportLedBlinking([List<String>? services]) => (super.noSuchMethod(
        Invocation.method(
          #isSupportLedBlinking,
          [services],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool isSupportAutoOnboarding([List<String>? services]) => (super.noSuchMethod(
        Invocation.method(
          #isSupportAutoOnboarding,
          [services],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool isSupportPnP([List<String>? services]) => (super.noSuchMethod(
        Invocation.method(
          #isSupportPnP,
          [services],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool isSupportTopologyOptimization([List<String>? services]) =>
      (super.noSuchMethod(
        Invocation.method(
          #isSupportTopologyOptimization,
          [services],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool isSupportMLO([List<String>? services]) => (super.noSuchMethod(
        Invocation.method(
          #isSupportMLO,
          [services],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool isSupportIPTv([List<String>? services]) => (super.noSuchMethod(
        Invocation.method(
          #isSupportIPTv,
          [services],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool isSupportDFS([List<String>? services]) => (super.noSuchMethod(
        Invocation.method(
          #isSupportDFS,
          [services],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool isSupportAirtimeFairness([List<String>? services]) =>
      (super.noSuchMethod(
        Invocation.method(
          #isSupportAirtimeFairness,
          [services],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool isSupportAdminPasswordAuthStatus([List<String>? services]) =>
      (super.noSuchMethod(
        Invocation.method(
          #isSupportAdminPasswordAuthStatus,
          [services],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool isSupportChildReboot([List<String>? services]) => (super.noSuchMethod(
        Invocation.method(
          #isSupportChildReboot,
          [services],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool isSupportChildFactoryReset([List<String>? services]) =>
      (super.noSuchMethod(
        Invocation.method(
          #isSupportChildFactoryReset,
          [services],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool isSupportWANExternal([List<String>? services]) => (super.noSuchMethod(
        Invocation.method(
          #isSupportWANExternal,
          [services],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool isSupportClientDeauth([List<String>? services]) => (super.noSuchMethod(
        Invocation.method(
          #isSupportClientDeauth,
          [services],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}
