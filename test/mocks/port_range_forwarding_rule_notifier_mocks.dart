// Mocks generated by Mockito 5.4.5 from annotations
// in privacy_gui/test/mocks/mockito_specs/port_range_forwarding_rule_notifier_spec.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter_riverpod/flutter_riverpod.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:privacy_gui/core/jnap/models/port_range_forwarding_rule.dart'
    as _i4;
import 'package:privacy_gui/page/advanced_settings/apps_and_gaming/ports/_ports.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNotifierProviderRef_0<T> extends _i1.SmartFake
    implements _i2.NotifierProviderRef<T> {
  _FakeNotifierProviderRef_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakePortRangeForwardingRuleState_1 extends _i1.SmartFake
    implements _i3.PortRangeForwardingRuleState {
  _FakePortRangeForwardingRuleState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(parent, parentInvocation);
}

/// A class which mocks [PortRangeForwardingRuleNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockPortRangeForwardingRuleNotifier
    extends _i2.Notifier<_i3.PortRangeForwardingRuleState>
    with _i1.Mock
    implements _i3.PortRangeForwardingRuleNotifier {
  @override
  _i2.NotifierProviderRef<_i3.PortRangeForwardingRuleState> get ref =>
      (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue:
            _FakeNotifierProviderRef_0<_i3.PortRangeForwardingRuleState>(
          this,
          Invocation.getter(#ref),
        ),
        returnValueForMissingStub:
            _FakeNotifierProviderRef_0<_i3.PortRangeForwardingRuleState>(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i2.NotifierProviderRef<_i3.PortRangeForwardingRuleState>);

  @override
  _i3.PortRangeForwardingRuleState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakePortRangeForwardingRuleState_1(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakePortRangeForwardingRuleState_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.PortRangeForwardingRuleState);

  @override
  set state(_i3.PortRangeForwardingRuleState? value) => super.noSuchMethod(
        Invocation.setter(#state, value),
        returnValueForMissingStub: null,
      );

  @override
  _i3.PortRangeForwardingRuleState build() => (super.noSuchMethod(
        Invocation.method(#build, []),
        returnValue: _FakePortRangeForwardingRuleState_1(
          this,
          Invocation.method(#build, []),
        ),
        returnValueForMissingStub: _FakePortRangeForwardingRuleState_1(
          this,
          Invocation.method(#build, []),
        ),
      ) as _i3.PortRangeForwardingRuleState);

  @override
  void init(
    List<_i4.PortRangeForwardingRule>? rules,
    _i4.PortRangeForwardingRule? rule,
    int? index,
    String? routerIp,
    String? subnetMask,
  ) =>
      super.noSuchMethod(
        Invocation.method(#init, [rules, rule, index, routerIp, subnetMask]),
        returnValueForMissingStub: null,
      );

  @override
  void updateRule(_i4.PortRangeForwardingRule? rule) => super.noSuchMethod(
        Invocation.method(#updateRule, [rule]),
        returnValueForMissingStub: null,
      );

  @override
  bool isRuleValid() => (super.noSuchMethod(
        Invocation.method(#isRuleValid, []),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool isDeviceIpValidate(String? ipAddress) => (super.noSuchMethod(
        Invocation.method(#isDeviceIpValidate, [ipAddress]),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool isPortRangeValid(int? firstPort, int? lastPort) => (super.noSuchMethod(
        Invocation.method(#isPortRangeValid, [firstPort, lastPort]),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool isPortConflict(int? firstPort, int? lastPort, String? protocol) =>
      (super.noSuchMethod(
        Invocation.method(#isPortConflict, [firstPort, lastPort, protocol]),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void listenSelf(
    void Function(
      _i3.PortRangeForwardingRuleState?,
      _i3.PortRangeForwardingRuleState,
    )? listener, {
    void Function(Object, StackTrace)? onError,
  }) =>
      super.noSuchMethod(
        Invocation.method(#listenSelf, [listener], {#onError: onError}),
        returnValueForMissingStub: null,
      );

  @override
  bool updateShouldNotify(
    _i3.PortRangeForwardingRuleState? previous,
    _i3.PortRangeForwardingRuleState? next,
  ) =>
      (super.noSuchMethod(
        Invocation.method(#updateShouldNotify, [previous, next]),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool doesRangeOverlap(
    int? range1First,
    int? range1Last,
    int? range2First,
    int? range2Last,
  ) =>
      (super.noSuchMethod(
        Invocation.method(#doesRangeOverlap, [
          range1First,
          range1Last,
          range2First,
          range2Last,
        ]),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}
