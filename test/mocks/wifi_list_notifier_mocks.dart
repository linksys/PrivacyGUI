// Mocks generated by Mockito 5.4.4 from annotations
// in privacy_gui/test/mocks/mockito_specs/wifi_list_notifier_spec.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:flutter_riverpod/flutter_riverpod.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:privacy_gui/page/wifi_settings/_wifi_settings.dart' as _i4;
import 'package:privacy_gui/page/wifi_settings/providers/wifi_state.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNotifierProviderRef_0<T> extends _i1.SmartFake
    implements _i2.NotifierProviderRef<T> {
  _FakeNotifierProviderRef_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWiFiState_1 extends _i1.SmartFake implements _i3.WiFiState {
  _FakeWiFiState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [WifiListNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockWifiListNotifier extends _i2.Notifier<_i3.WiFiState> with  _i1.Mock implements _i4.WifiListNotifier {
  @override
  _i2.NotifierProviderRef<_i3.WiFiState> get ref => (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue: _FakeNotifierProviderRef_0<_i3.WiFiState>(
          this,
          Invocation.getter(#ref),
        ),
        returnValueForMissingStub: _FakeNotifierProviderRef_0<_i3.WiFiState>(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i2.NotifierProviderRef<_i3.WiFiState>);

  @override
  _i3.WiFiState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeWiFiState_1(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeWiFiState_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.WiFiState);

  @override
  set state(_i3.WiFiState? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.WiFiState build() => (super.noSuchMethod(
        Invocation.method(
          #build,
          [],
        ),
        returnValue: _FakeWiFiState_1(
          this,
          Invocation.method(
            #build,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeWiFiState_1(
          this,
          Invocation.method(
            #build,
            [],
          ),
        ),
      ) as _i3.WiFiState);

  @override
  _i5.Future<_i3.WiFiState> fetch([bool? force = false]) => (super.noSuchMethod(
        Invocation.method(
          #fetch,
          [force],
        ),
        returnValue: _i5.Future<_i3.WiFiState>.value(_FakeWiFiState_1(
          this,
          Invocation.method(
            #fetch,
            [force],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.WiFiState>.value(_FakeWiFiState_1(
          this,
          Invocation.method(
            #fetch,
            [force],
          ),
        )),
      ) as _i5.Future<_i3.WiFiState>);

  @override
  _i5.Future<_i3.WiFiState> save() => (super.noSuchMethod(
        Invocation.method(
          #save,
          [],
        ),
        returnValue: _i5.Future<_i3.WiFiState>.value(_FakeWiFiState_1(
          this,
          Invocation.method(
            #save,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.WiFiState>.value(_FakeWiFiState_1(
          this,
          Invocation.method(
            #save,
            [],
          ),
        )),
      ) as _i5.Future<_i3.WiFiState>);

  @override
  _i5.Future<void> saveToggleEnabled({
    required List<String>? radios,
    required bool? enabled,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveToggleEnabled,
          [],
          {
            #radios: radios,
            #enabled: enabled,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  bool checkingMLOSettingsConflicts(
    Map<_i4.WifiRadioBand, _i4.WiFiItem>? radios, {
    bool? isMloEnabled,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkingMLOSettingsConflicts,
          [radios],
          {#isMloEnabled: isMloEnabled},
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  int? checkIfChannelLegalWithWidth({
    required int? channel,
    required _i4.WifiChannelWidth? channelWidth,
    required _i4.WifiRadioBand? band,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkIfChannelLegalWithWidth,
          [],
          {
            #channel: channel,
            #channelWidth: channelWidth,
            #band: band,
          },
        ),
        returnValueForMissingStub: null,
      ) as int?);

  @override
  void setWiFiSSID(
    String? ssid, [
    _i4.WifiRadioBand? band,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #setWiFiSSID,
          [
            ssid,
            band,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setWiFiPassword(
    String? password, [
    _i4.WifiRadioBand? band,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #setWiFiPassword,
          [
            password,
            band,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setWiFiEnabled(
    bool? isEnabled, [
    _i4.WifiRadioBand? band,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #setWiFiEnabled,
          [
            isEnabled,
            band,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setWiFiSecurityType(
    _i4.WifiSecurityType? type,
    _i4.WifiRadioBand? band,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setWiFiSecurityType,
          [
            type,
            band,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setWiFiMode(
    _i4.WifiWirelessMode? mode,
    _i4.WifiRadioBand? band,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setWiFiMode,
          [
            mode,
            band,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setEnableBoardcast(
    bool? isEnabled,
    _i4.WifiRadioBand? band,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setEnableBoardcast,
          [
            isEnabled,
            band,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setChannelWidth(
    _i4.WifiChannelWidth? channelWidth,
    _i4.WifiRadioBand? band,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setChannelWidth,
          [
            channelWidth,
            band,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setChannel(
    int? channel,
    _i4.WifiRadioBand? band,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setChannel,
          [
            channel,
            band,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool updateShouldNotify(
    _i3.WiFiState? previous,
    _i3.WiFiState? next,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            previous,
            next,
          ],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}
