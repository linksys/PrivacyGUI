// Mocks generated by Mockito 5.4.4 from annotations
// in privacy_gui/test/page/advanced_settings/local_network_settings/views/local_network_settings_view_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:flutter_riverpod/flutter_riverpod.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:privacy_gui/core/jnap/models/lan_settings.dart' as _i6;
import 'package:privacy_gui/page/advanced_settings/local_network_settings/providers/local_network_settings_provider.dart'
    as _i4;
import 'package:privacy_gui/page/advanced_settings/local_network_settings/providers/local_network_settings_state.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNotifierProviderRef_0<T> extends _i1.SmartFake
    implements _i2.NotifierProviderRef<T> {
  _FakeNotifierProviderRef_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLocalNetworkSettingsState_1 extends _i1.SmartFake
    implements _i3.LocalNetworkSettingsState {
  _FakeLocalNetworkSettingsState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LocalNetworkSettingsNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalNetworkSettingsNotifier
    extends _i2.Notifier<_i3.LocalNetworkSettingsState>
    with _i1.Mock
    implements _i4.LocalNetworkSettingsNotifier {
  @override
  _i2.NotifierProviderRef<_i3.LocalNetworkSettingsState> get ref =>
      (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue: _FakeNotifierProviderRef_0<_i3.LocalNetworkSettingsState>(
          this,
          Invocation.getter(#ref),
        ),
        returnValueForMissingStub:
            _FakeNotifierProviderRef_0<_i3.LocalNetworkSettingsState>(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i2.NotifierProviderRef<_i3.LocalNetworkSettingsState>);

  @override
  _i3.LocalNetworkSettingsState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeLocalNetworkSettingsState_1(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeLocalNetworkSettingsState_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.LocalNetworkSettingsState);

  @override
  set state(_i3.LocalNetworkSettingsState? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.LocalNetworkSettingsState build() => (super.noSuchMethod(
        Invocation.method(
          #build,
          [],
        ),
        returnValue: _FakeLocalNetworkSettingsState_1(
          this,
          Invocation.method(
            #build,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeLocalNetworkSettingsState_1(
          this,
          Invocation.method(
            #build,
            [],
          ),
        ),
      ) as _i3.LocalNetworkSettingsState);

  @override
  _i3.LocalNetworkSettingsState currentSettings() => (super.noSuchMethod(
        Invocation.method(
          #currentSettings,
          [],
        ),
        returnValue: _FakeLocalNetworkSettingsState_1(
          this,
          Invocation.method(
            #currentSettings,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeLocalNetworkSettingsState_1(
          this,
          Invocation.method(
            #currentSettings,
            [],
          ),
        ),
      ) as _i3.LocalNetworkSettingsState);

  @override
  _i5.Future<_i3.LocalNetworkSettingsState> fetch(
          {bool? fetchRemote = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetch,
          [],
          {#fetchRemote: fetchRemote},
        ),
        returnValue: _i5.Future<_i3.LocalNetworkSettingsState>.value(
            _FakeLocalNetworkSettingsState_1(
          this,
          Invocation.method(
            #fetch,
            [],
            {#fetchRemote: fetchRemote},
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.LocalNetworkSettingsState>.value(
                _FakeLocalNetworkSettingsState_1(
          this,
          Invocation.method(
            #fetch,
            [],
            {#fetchRemote: fetchRemote},
          ),
        )),
      ) as _i5.Future<_i3.LocalNetworkSettingsState>);

  @override
  _i5.Future<void> saveSettings(_i3.LocalNetworkSettingsState? settings) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveSettings,
          [settings],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void updateHostName(String? hostName) => super.noSuchMethod(
        Invocation.method(
          #updateHostName,
          [hostName],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateDHCPReservationList(
          List<_i6.DHCPReservation>? addedDHCPReservationList) =>
      super.noSuchMethod(
        Invocation.method(
          #updateDHCPReservationList,
          [addedDHCPReservationList],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool updateDHCPReservationOfIndex(
    _i6.DHCPReservation? item,
    int? index,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateDHCPReservationOfIndex,
          [
            item,
            index,
          ],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool isReservationOverlap({
    required _i6.DHCPReservation? item,
    int? index,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #isReservationOverlap,
          [],
          {
            #item: item,
            #index: index,
          },
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void updateState(_i3.LocalNetworkSettingsState? newState) =>
      super.noSuchMethod(
        Invocation.method(
          #updateState,
          [newState],
        ),
        returnValueForMissingStub: null,
      );

  @override
  (bool, _i3.LocalNetworkSettingsState) routerIpAddressFinished(
    String? newRouterIpAddress,
    _i3.LocalNetworkSettingsState? settings,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #routerIpAddressFinished,
          [
            newRouterIpAddress,
            settings,
          ],
        ),
        returnValue: (
          false,
          _FakeLocalNetworkSettingsState_1(
            this,
            Invocation.method(
              #routerIpAddressFinished,
              [
                newRouterIpAddress,
                settings,
              ],
            ),
          )
        ),
        returnValueForMissingStub: (
          false,
          _FakeLocalNetworkSettingsState_1(
            this,
            Invocation.method(
              #routerIpAddressFinished,
              [
                newRouterIpAddress,
                settings,
              ],
            ),
          )
        ),
      ) as (bool, _i3.LocalNetworkSettingsState));

  @override
  (bool, _i3.LocalNetworkSettingsState) subnetMaskFinished(
    String? subnetMask,
    _i3.LocalNetworkSettingsState? settings,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #subnetMaskFinished,
          [
            subnetMask,
            settings,
          ],
        ),
        returnValue: (
          false,
          _FakeLocalNetworkSettingsState_1(
            this,
            Invocation.method(
              #subnetMaskFinished,
              [
                subnetMask,
                settings,
              ],
            ),
          )
        ),
        returnValueForMissingStub: (
          false,
          _FakeLocalNetworkSettingsState_1(
            this,
            Invocation.method(
              #subnetMaskFinished,
              [
                subnetMask,
                settings,
              ],
            ),
          )
        ),
      ) as (bool, _i3.LocalNetworkSettingsState));

  @override
  (bool, _i3.LocalNetworkSettingsState) maxUserAllowedFinished(
    String? maxUserAllowed,
    _i3.LocalNetworkSettingsState? settings,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #maxUserAllowedFinished,
          [
            maxUserAllowed,
            settings,
          ],
        ),
        returnValue: (
          false,
          _FakeLocalNetworkSettingsState_1(
            this,
            Invocation.method(
              #maxUserAllowedFinished,
              [
                maxUserAllowed,
                settings,
              ],
            ),
          )
        ),
        returnValueForMissingStub: (
          false,
          _FakeLocalNetworkSettingsState_1(
            this,
            Invocation.method(
              #maxUserAllowedFinished,
              [
                maxUserAllowed,
                settings,
              ],
            ),
          )
        ),
      ) as (bool, _i3.LocalNetworkSettingsState));

  @override
  (bool, _i3.LocalNetworkSettingsState) startIpFinished(
    String? startIpAddress,
    _i3.LocalNetworkSettingsState? settings,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #startIpFinished,
          [
            startIpAddress,
            settings,
          ],
        ),
        returnValue: (
          false,
          _FakeLocalNetworkSettingsState_1(
            this,
            Invocation.method(
              #startIpFinished,
              [
                startIpAddress,
                settings,
              ],
            ),
          )
        ),
        returnValueForMissingStub: (
          false,
          _FakeLocalNetworkSettingsState_1(
            this,
            Invocation.method(
              #startIpFinished,
              [
                startIpAddress,
                settings,
              ],
            ),
          )
        ),
      ) as (bool, _i3.LocalNetworkSettingsState));

  @override
  (bool, _i3.LocalNetworkSettingsState) clientLeaseFinished(
    String? leaseTime,
    _i3.LocalNetworkSettingsState? settings,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #clientLeaseFinished,
          [
            leaseTime,
            settings,
          ],
        ),
        returnValue: (
          false,
          _FakeLocalNetworkSettingsState_1(
            this,
            Invocation.method(
              #clientLeaseFinished,
              [
                leaseTime,
                settings,
              ],
            ),
          )
        ),
        returnValueForMissingStub: (
          false,
          _FakeLocalNetworkSettingsState_1(
            this,
            Invocation.method(
              #clientLeaseFinished,
              [
                leaseTime,
                settings,
              ],
            ),
          )
        ),
      ) as (bool, _i3.LocalNetworkSettingsState));

  @override
  (bool, _i3.LocalNetworkSettingsState) staticDns1Finished(
    String? dnsIp,
    _i3.LocalNetworkSettingsState? settings,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #staticDns1Finished,
          [
            dnsIp,
            settings,
          ],
        ),
        returnValue: (
          false,
          _FakeLocalNetworkSettingsState_1(
            this,
            Invocation.method(
              #staticDns1Finished,
              [
                dnsIp,
                settings,
              ],
            ),
          )
        ),
        returnValueForMissingStub: (
          false,
          _FakeLocalNetworkSettingsState_1(
            this,
            Invocation.method(
              #staticDns1Finished,
              [
                dnsIp,
                settings,
              ],
            ),
          )
        ),
      ) as (bool, _i3.LocalNetworkSettingsState));

  @override
  (bool, _i3.LocalNetworkSettingsState) staticDns2Finished(
    String? dnsIp,
    _i3.LocalNetworkSettingsState? settings,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #staticDns2Finished,
          [
            dnsIp,
            settings,
          ],
        ),
        returnValue: (
          false,
          _FakeLocalNetworkSettingsState_1(
            this,
            Invocation.method(
              #staticDns2Finished,
              [
                dnsIp,
                settings,
              ],
            ),
          )
        ),
        returnValueForMissingStub: (
          false,
          _FakeLocalNetworkSettingsState_1(
            this,
            Invocation.method(
              #staticDns2Finished,
              [
                dnsIp,
                settings,
              ],
            ),
          )
        ),
      ) as (bool, _i3.LocalNetworkSettingsState));

  @override
  (bool, _i3.LocalNetworkSettingsState) staticDns3Finished(
    String? dnsIp,
    _i3.LocalNetworkSettingsState? settings,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #staticDns3Finished,
          [
            dnsIp,
            settings,
          ],
        ),
        returnValue: (
          false,
          _FakeLocalNetworkSettingsState_1(
            this,
            Invocation.method(
              #staticDns3Finished,
              [
                dnsIp,
                settings,
              ],
            ),
          )
        ),
        returnValueForMissingStub: (
          false,
          _FakeLocalNetworkSettingsState_1(
            this,
            Invocation.method(
              #staticDns3Finished,
              [
                dnsIp,
                settings,
              ],
            ),
          )
        ),
      ) as (bool, _i3.LocalNetworkSettingsState));

  @override
  (bool, _i3.LocalNetworkSettingsState) winsServerFinished(
    String? winsIp,
    _i3.LocalNetworkSettingsState? settings,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #winsServerFinished,
          [
            winsIp,
            settings,
          ],
        ),
        returnValue: (
          false,
          _FakeLocalNetworkSettingsState_1(
            this,
            Invocation.method(
              #winsServerFinished,
              [
                winsIp,
                settings,
              ],
            ),
          )
        ),
        returnValueForMissingStub: (
          false,
          _FakeLocalNetworkSettingsState_1(
            this,
            Invocation.method(
              #winsServerFinished,
              [
                winsIp,
                settings,
              ],
            ),
          )
        ),
      ) as (bool, _i3.LocalNetworkSettingsState));

  @override
  bool updateShouldNotify(
    _i3.LocalNetworkSettingsState? previous,
    _i3.LocalNetworkSettingsState? next,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            previous,
            next,
          ],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}
