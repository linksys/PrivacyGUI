// Mocks generated by Mockito 5.4.5 from annotations
// in privacy_gui/test/mocks/mockito_specs/polling_notifier_spec.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter_riverpod/flutter_riverpod.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:privacy_gui/core/jnap/providers/polling_provider.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAsyncNotifierProviderRef_0<T> extends _i1.SmartFake
    implements _i2.AsyncNotifierProviderRef<T> {
  _FakeAsyncNotifierProviderRef_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAsyncValue_1<T> extends _i1.SmartFake implements _i2.AsyncValue<T> {
  _FakeAsyncValue_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCoreTransactionData_2 extends _i1.SmartFake
    implements _i3.CoreTransactionData {
  _FakeCoreTransactionData_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PollingNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockPollingNotifier extends _i2.AsyncNotifier<_i3.CoreTransactionData> with _i1.Mock implements _i3.PollingNotifier {
  @override
  set paused(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #paused,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.AsyncNotifierProviderRef<_i3.CoreTransactionData> get ref =>
      (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue: _FakeAsyncNotifierProviderRef_0<_i3.CoreTransactionData>(
          this,
          Invocation.getter(#ref),
        ),
        returnValueForMissingStub:
            _FakeAsyncNotifierProviderRef_0<_i3.CoreTransactionData>(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i2.AsyncNotifierProviderRef<_i3.CoreTransactionData>);

  @override
  _i2.AsyncValue<_i3.CoreTransactionData> get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeAsyncValue_1<_i3.CoreTransactionData>(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeAsyncValue_1<_i3.CoreTransactionData>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.AsyncValue<_i3.CoreTransactionData>);

  @override
  set state(_i2.AsyncValue<_i3.CoreTransactionData>? newState) =>
      super.noSuchMethod(
        Invocation.setter(
          #state,
          newState,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<_i3.CoreTransactionData> get future => (super.noSuchMethod(
        Invocation.getter(#future),
        returnValue: _i4.Future<_i3.CoreTransactionData>.value(
            _FakeCoreTransactionData_2(
          this,
          Invocation.getter(#future),
        )),
        returnValueForMissingStub: _i4.Future<_i3.CoreTransactionData>.value(
            _FakeCoreTransactionData_2(
          this,
          Invocation.getter(#future),
        )),
      ) as _i4.Future<_i3.CoreTransactionData>);

  @override
  _i4.FutureOr<_i3.CoreTransactionData> build() => (super.noSuchMethod(
        Invocation.method(
          #build,
          [],
        ),
        returnValue: _i4.Future<_i3.CoreTransactionData>.value(
            _FakeCoreTransactionData_2(
          this,
          Invocation.method(
            #build,
            [],
          ),
        )),
        returnValueForMissingStub: _i4.Future<_i3.CoreTransactionData>.value(
            _FakeCoreTransactionData_2(
          this,
          Invocation.method(
            #build,
            [],
          ),
        )),
      ) as _i4.FutureOr<_i3.CoreTransactionData>);

  @override
  _i4.Future<dynamic> forcePolling() => (super.noSuchMethod(
        Invocation.method(
          #forcePolling,
          [],
        ),
        returnValue: _i4.Future<dynamic>.value(),
        returnValueForMissingStub: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);

  @override
  void checkAndStartPolling([bool? force = false]) => super.noSuchMethod(
        Invocation.method(
          #checkAndStartPolling,
          [force],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<String> checkSmartMode() => (super.noSuchMethod(
        Invocation.method(
          #checkSmartMode,
          [],
        ),
        returnValue: _i4.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #checkSmartMode,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #checkSmartMode,
            [],
          ),
        )),
      ) as _i4.Future<String>);

  @override
  void listenSelf(
    void Function(
      _i2.AsyncValue<_i3.CoreTransactionData>?,
      _i2.AsyncValue<_i3.CoreTransactionData>,
    )? listener, {
    void Function(
      Object,
      StackTrace,
    )? onError,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #listenSelf,
          [listener],
          {#onError: onError},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<_i3.CoreTransactionData> update(
    _i4.FutureOr<_i3.CoreTransactionData> Function(_i3.CoreTransactionData)?
        cb, {
    _i4.FutureOr<_i3.CoreTransactionData> Function(
      Object,
      StackTrace,
    )? onError,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [cb],
          {#onError: onError},
        ),
        returnValue: _i4.Future<_i3.CoreTransactionData>.value(
            _FakeCoreTransactionData_2(
          this,
          Invocation.method(
            #update,
            [cb],
            {#onError: onError},
          ),
        )),
        returnValueForMissingStub: _i4.Future<_i3.CoreTransactionData>.value(
            _FakeCoreTransactionData_2(
          this,
          Invocation.method(
            #update,
            [cb],
            {#onError: onError},
          ),
        )),
      ) as _i4.Future<_i3.CoreTransactionData>);

  @override
  bool updateShouldNotify(
    _i2.AsyncValue<_i3.CoreTransactionData>? previous,
    _i2.AsyncValue<_i3.CoreTransactionData>? next,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            previous,
            next,
          ],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}
