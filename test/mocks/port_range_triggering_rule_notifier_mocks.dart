// Mocks generated by Mockito 5.4.4 from annotations
// in privacy_gui/test/page/advanced_settings/port_forwarding/views/localizations/port_range_triggering_rule_view_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:flutter_riverpod/flutter_riverpod.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;
import 'package:privacy_gui/core/jnap/models/port_range_triggering_rule.dart'
    as _i6;
import 'package:privacy_gui/page/advanced_settings/apps_and_gaming/ports/_ports.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNotifierProviderRef_0<T> extends _i1.SmartFake
    implements _i2.NotifierProviderRef<T> {
  _FakeNotifierProviderRef_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePortRangeTriggeringRuleState_1 extends _i1.SmartFake
    implements _i3.PortRangeTriggeringRuleState {
  _FakePortRangeTriggeringRuleState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PortRangeTriggeringRuleNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockPortRangeTriggeringRuleNotifier extends _i2.Notifier<_i3.PortRangeTriggeringRuleState> with _i1.Mock
    implements _i3.PortRangeTriggeringRuleNotifier {
  @override
  String get subnetMask => (super.noSuchMethod(
        Invocation.getter(#subnetMask),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#subnetMask),
        ),
        returnValueForMissingStub: _i4.dummyValue<String>(
          this,
          Invocation.getter(#subnetMask),
        ),
      ) as String);

  @override
  String get ipAddress => (super.noSuchMethod(
        Invocation.getter(#ipAddress),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#ipAddress),
        ),
        returnValueForMissingStub: _i4.dummyValue<String>(
          this,
          Invocation.getter(#ipAddress),
        ),
      ) as String);

  @override
  _i2.NotifierProviderRef<_i3.PortRangeTriggeringRuleState> get ref =>
      (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue:
            _FakeNotifierProviderRef_0<_i3.PortRangeTriggeringRuleState>(
          this,
          Invocation.getter(#ref),
        ),
        returnValueForMissingStub:
            _FakeNotifierProviderRef_0<_i3.PortRangeTriggeringRuleState>(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i2.NotifierProviderRef<_i3.PortRangeTriggeringRuleState>);

  @override
  _i3.PortRangeTriggeringRuleState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakePortRangeTriggeringRuleState_1(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakePortRangeTriggeringRuleState_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.PortRangeTriggeringRuleState);

  @override
  set state(_i3.PortRangeTriggeringRuleState? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.PortRangeTriggeringRuleState build() => (super.noSuchMethod(
        Invocation.method(
          #build,
          [],
        ),
        returnValue: _FakePortRangeTriggeringRuleState_1(
          this,
          Invocation.method(
            #build,
            [],
          ),
        ),
        returnValueForMissingStub: _FakePortRangeTriggeringRuleState_1(
          this,
          Invocation.method(
            #build,
            [],
          ),
        ),
      ) as _i3.PortRangeTriggeringRuleState);

  @override
  _i5.Future<dynamic> goAdd(List<_i6.PortRangeTriggeringRule>? rules) =>
      (super.noSuchMethod(
        Invocation.method(
          #goAdd,
          [rules],
        ),
        returnValue: _i5.Future<dynamic>.value(),
        returnValueForMissingStub: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);

  @override
  _i5.Future<dynamic> goEdit(
    List<_i6.PortRangeTriggeringRule>? rules,
    _i6.PortRangeTriggeringRule? rule,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #goEdit,
          [
            rules,
            rule,
          ],
        ),
        returnValue: _i5.Future<dynamic>.value(),
        returnValueForMissingStub: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);

  @override
  _i5.Future<dynamic> fetch() => (super.noSuchMethod(
        Invocation.method(
          #fetch,
          [],
        ),
        returnValue: _i5.Future<dynamic>.value(),
        returnValueForMissingStub: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);

  @override
  _i5.Future<bool> save(_i6.PortRangeTriggeringRule? rule) =>
      (super.noSuchMethod(
        Invocation.method(
          #save,
          [rule],
        ),
        returnValue: _i5.Future<bool>.value(false),
        returnValueForMissingStub: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> delete() => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
        returnValueForMissingStub: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  bool isDeviceIpValidate(String? ipAddress) => (super.noSuchMethod(
        Invocation.method(
          #isDeviceIpValidate,
          [ipAddress],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool isEdit() => (super.noSuchMethod(
        Invocation.method(
          #isEdit,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool updateShouldNotify(
    _i3.PortRangeTriggeringRuleState? previous,
    _i3.PortRangeTriggeringRuleState? next,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            previous,
            next,
          ],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}
