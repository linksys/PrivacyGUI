// Mocks generated by Mockito 5.4.4 from annotations
// in privacy_gui/test/mocks/instant_verify_notifier_spec.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:flutter_riverpod/flutter_riverpod.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:privacy_gui/core/jnap/models/ping_status.dart' as _i6;
import 'package:privacy_gui/core/jnap/models/traceroute_status.dart' as _i7;
import 'package:privacy_gui/page/instant_verify/providers/instant_verify_provider.dart'
    as _i4;
import 'package:privacy_gui/page/instant_verify/providers/instant_verify_state.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNotifierProviderRef_0<T> extends _i1.SmartFake
    implements _i2.NotifierProviderRef<T> {
  _FakeNotifierProviderRef_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInstantVerifyState_1 extends _i1.SmartFake
    implements _i3.InstantVerifyState {
  _FakeInstantVerifyState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [InstantVerifyNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockInstantVerifyNotifier extends _i2.Notifier<_i3.InstantVerifyState> with _i1.Mock
    implements _i4.InstantVerifyNotifier {
  @override
  _i2.NotifierProviderRef<_i3.InstantVerifyState> get ref =>
      (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue: _FakeNotifierProviderRef_0<_i3.InstantVerifyState>(
          this,
          Invocation.getter(#ref),
        ),
        returnValueForMissingStub:
            _FakeNotifierProviderRef_0<_i3.InstantVerifyState>(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i2.NotifierProviderRef<_i3.InstantVerifyState>);

  @override
  _i3.InstantVerifyState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeInstantVerifyState_1(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeInstantVerifyState_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.InstantVerifyState);

  @override
  set state(_i3.InstantVerifyState? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.InstantVerifyState build() => (super.noSuchMethod(
        Invocation.method(
          #build,
          [],
        ),
        returnValue: _FakeInstantVerifyState_1(
          this,
          Invocation.method(
            #build,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeInstantVerifyState_1(
          this,
          Invocation.method(
            #build,
            [],
          ),
        ),
      ) as _i3.InstantVerifyState);

  @override
  _i5.Future<dynamic> ping({
    required String? host,
    required int? pingCount,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #ping,
          [],
          {
            #host: host,
            #pingCount: pingCount,
          },
        ),
        returnValue: _i5.Future<dynamic>.value(),
        returnValueForMissingStub: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);

  @override
  _i5.Future<dynamic> stopPing() => (super.noSuchMethod(
        Invocation.method(
          #stopPing,
          [],
        ),
        returnValue: _i5.Future<dynamic>.value(),
        returnValueForMissingStub: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);

  @override
  _i5.Stream<_i6.PingStatus> getPingStatus() => (super.noSuchMethod(
        Invocation.method(
          #getPingStatus,
          [],
        ),
        returnValue: _i5.Stream<_i6.PingStatus>.empty(),
        returnValueForMissingStub: _i5.Stream<_i6.PingStatus>.empty(),
      ) as _i5.Stream<_i6.PingStatus>);

  @override
  _i5.Future<dynamic> traceroute({
    required String? host,
    required int? pingCount,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #traceroute,
          [],
          {
            #host: host,
            #pingCount: pingCount,
          },
        ),
        returnValue: _i5.Future<dynamic>.value(),
        returnValueForMissingStub: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);

  @override
  _i5.Future<dynamic> stopTraceroute() => (super.noSuchMethod(
        Invocation.method(
          #stopTraceroute,
          [],
        ),
        returnValue: _i5.Future<dynamic>.value(),
        returnValueForMissingStub: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);

  @override
  _i5.Stream<_i7.TracerouteStatus> getTracerouteStatus() => (super.noSuchMethod(
        Invocation.method(
          #getTracerouteStatus,
          [],
        ),
        returnValue: _i5.Stream<_i7.TracerouteStatus>.empty(),
        returnValueForMissingStub: _i5.Stream<_i7.TracerouteStatus>.empty(),
      ) as _i5.Stream<_i7.TracerouteStatus>);

  @override
  bool updateShouldNotify(
    _i3.InstantVerifyState? previous,
    _i3.InstantVerifyState? next,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            previous,
            next,
          ],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}
