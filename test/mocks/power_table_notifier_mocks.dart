// Mocks generated by Mockito 5.4.4 from annotations
// in privacy_gui/test/mocks/mockito_specs/power_table_notifier.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter_riverpod/flutter_riverpod.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:privacy_gui/page/instant_admin/providers/_providers.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNotifierProviderRef_0<T> extends _i1.SmartFake
    implements _i2.NotifierProviderRef<T> {
  _FakeNotifierProviderRef_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePowerTableState_1 extends _i1.SmartFake
    implements _i3.PowerTableState {
  _FakePowerTableState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PowerTableNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockPowerTableNotifier extends _i2.Notifier<
    _i3.PowerTableState>
    with _i1.Mock
    implements _i3.PowerTableNotifier {
  @override
  _i2.NotifierProviderRef<_i3.PowerTableState> get ref => (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue: _FakeNotifierProviderRef_0<_i3.PowerTableState>(
          this,
          Invocation.getter(#ref),
        ),
        returnValueForMissingStub:
            _FakeNotifierProviderRef_0<_i3.PowerTableState>(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i2.NotifierProviderRef<_i3.PowerTableState>);

  @override
  _i3.PowerTableState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakePowerTableState_1(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakePowerTableState_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.PowerTableState);

  @override
  set state(_i3.PowerTableState? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.PowerTableState build() => (super.noSuchMethod(
        Invocation.method(
          #build,
          [],
        ),
        returnValue: _FakePowerTableState_1(
          this,
          Invocation.method(
            #build,
            [],
          ),
        ),
        returnValueForMissingStub: _FakePowerTableState_1(
          this,
          Invocation.method(
            #build,
            [],
          ),
        ),
      ) as _i3.PowerTableState);

  @override
  _i4.Future<_i3.PowerTableState> save(_i3.PowerTableCountries? country) =>
      (super.noSuchMethod(
        Invocation.method(
          #save,
          [country],
        ),
        returnValue:
            _i4.Future<_i3.PowerTableState>.value(_FakePowerTableState_1(
          this,
          Invocation.method(
            #save,
            [country],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i3.PowerTableState>.value(_FakePowerTableState_1(
          this,
          Invocation.method(
            #save,
            [country],
          ),
        )),
      ) as _i4.Future<_i3.PowerTableState>);

  @override
  void listenSelf(
    void Function(
      _i3.PowerTableState?,
      _i3.PowerTableState,
    )? listener, {
    void Function(
      Object,
      StackTrace,
    )? onError,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #listenSelf,
          [listener],
          {#onError: onError},
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool updateShouldNotify(
    _i3.PowerTableState? previous,
    _i3.PowerTableState? next,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            previous,
            next,
          ],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}
