// Mocks generated by Mockito 5.4.4 from annotations
// in privacy_gui/test/mocks/mockito_specs/connectivity_notifier_spec.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:connectivity_plus/connectivity_plus.dart' as _i4;
import 'package:flutter_riverpod/flutter_riverpod.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:privacy_gui/providers/connectivity/_connectivity.dart' as _i5;
import 'package:privacy_gui/providers/connectivity/availability_info.dart'
    as _i6;
import 'package:privacy_gui/providers/connectivity/connectivity_info.dart'
    as _i8;
import 'package:privacy_gui/providers/connectivity/connectivity_state.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNotifierProviderRef_0<T> extends _i1.SmartFake
    implements _i2.NotifierProviderRef<T> {
  _FakeNotifierProviderRef_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConnectivityState_1 extends _i1.SmartFake
    implements _i3.ConnectivityState {
  _FakeConnectivityState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConnectivity_2 extends _i1.SmartFake implements _i4.Connectivity {
  _FakeConnectivity_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDuration_3 extends _i1.SmartFake implements Duration {
  _FakeDuration_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRouterConfiguredData_4 extends _i1.SmartFake
    implements _i5.RouterConfiguredData {
  _FakeRouterConfiguredData_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAvailabilityInfo_5 extends _i1.SmartFake
    implements _i6.AvailabilityInfo {
  _FakeAvailabilityInfo_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ConnectivityNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivityNotifier extends _i2.Notifier<_i3.ConnectivityState>
    with _i1.Mock
    implements _i5.ConnectivityNotifier {
  @override
  _i2.NotifierProviderRef<_i3.ConnectivityState> get ref => (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue: _FakeNotifierProviderRef_0<_i3.ConnectivityState>(
          this,
          Invocation.getter(#ref),
        ),
        returnValueForMissingStub:
            _FakeNotifierProviderRef_0<_i3.ConnectivityState>(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i2.NotifierProviderRef<_i3.ConnectivityState>);

  @override
  _i3.ConnectivityState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeConnectivityState_1(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeConnectivityState_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.ConnectivityState);

  @override
  set state(_i3.ConnectivityState? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Connectivity get connectivity => (super.noSuchMethod(
        Invocation.getter(#connectivity),
        returnValue: _FakeConnectivity_2(
          this,
          Invocation.getter(#connectivity),
        ),
        returnValueForMissingStub: _FakeConnectivity_2(
          this,
          Invocation.getter(#connectivity),
        ),
      ) as _i4.Connectivity);

  @override
  Duration get internetCheckPeriod => (super.noSuchMethod(
        Invocation.getter(#internetCheckPeriod),
        returnValue: _FakeDuration_3(
          this,
          Invocation.getter(#internetCheckPeriod),
        ),
        returnValueForMissingStub: _FakeDuration_3(
          this,
          Invocation.getter(#internetCheckPeriod),
        ),
      ) as Duration);

  @override
  set internetCheckPeriod(Duration? _internetCheckPeriod) => super.noSuchMethod(
        Invocation.setter(
          #internetCheckPeriod,
          _internetCheckPeriod,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set timer(_i7.Timer? _timer) => super.noSuchMethod(
        Invocation.setter(
          #timer,
          _timer,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set callback(
          dynamic Function(
            bool,
            _i8.ConnectivityInfo,
            _i6.AvailabilityInfo?,
          )? callback) =>
      super.noSuchMethod(
        Invocation.setter(
          #callback,
          callback,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.ConnectivityState build() => (super.noSuchMethod(
        Invocation.method(
          #build,
          [],
        ),
        returnValue: _FakeConnectivityState_1(
          this,
          Invocation.method(
            #build,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeConnectivityState_1(
          this,
          Invocation.method(
            #build,
            [],
          ),
        ),
      ) as _i3.ConnectivityState);

  @override
  _i7.Future<dynamic> onConnectivityChanged(_i8.ConnectivityInfo? info) =>
      (super.noSuchMethod(
        Invocation.method(
          #onConnectivityChanged,
          [info],
        ),
        returnValue: _i7.Future<dynamic>.value(),
        returnValueForMissingStub: _i7.Future<dynamic>.value(),
      ) as _i7.Future<dynamic>);

  @override
  _i7.Future<_i3.ConnectivityState> forceUpdate() => (super.noSuchMethod(
        Invocation.method(
          #forceUpdate,
          [],
        ),
        returnValue:
            _i7.Future<_i3.ConnectivityState>.value(_FakeConnectivityState_1(
          this,
          Invocation.method(
            #forceUpdate,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i3.ConnectivityState>.value(_FakeConnectivityState_1(
          this,
          Invocation.method(
            #forceUpdate,
            [],
          ),
        )),
      ) as _i7.Future<_i3.ConnectivityState>);

  @override
  _i7.Future<_i5.RouterConfiguredData> isRouterConfigured() =>
      (super.noSuchMethod(
        Invocation.method(
          #isRouterConfigured,
          [],
        ),
        returnValue: _i7.Future<_i5.RouterConfiguredData>.value(
            _FakeRouterConfiguredData_4(
          this,
          Invocation.method(
            #isRouterConfigured,
            [],
          ),
        )),
        returnValueForMissingStub: _i7.Future<_i5.RouterConfiguredData>.value(
            _FakeRouterConfiguredData_4(
          this,
          Invocation.method(
            #isRouterConfigured,
            [],
          ),
        )),
      ) as _i7.Future<_i5.RouterConfiguredData>);

  @override
  void listenSelf(
    void Function(
      _i3.ConnectivityState?,
      _i3.ConnectivityState,
    )? listener, {
    void Function(
      Object,
      StackTrace,
    )? onError,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #listenSelf,
          [listener],
          {#onError: onError},
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool updateShouldNotify(
    _i3.ConnectivityState? previous,
    _i3.ConnectivityState? next,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            previous,
            next,
          ],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void start() => super.noSuchMethod(
        Invocation.method(
          #start,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void stop() => super.noSuchMethod(
        Invocation.method(
          #stop,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic updateConnectivity(_i4.ConnectivityResult? result) =>
      super.noSuchMethod(
        Invocation.method(
          #updateConnectivity,
          [result],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<_i3.ConnectivityState> check(_i8.ConnectivityInfo? info) =>
      (super.noSuchMethod(
        Invocation.method(
          #check,
          [info],
        ),
        returnValue:
            _i7.Future<_i3.ConnectivityState>.value(_FakeConnectivityState_1(
          this,
          Invocation.method(
            #check,
            [info],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i3.ConnectivityState>.value(_FakeConnectivityState_1(
          this,
          Invocation.method(
            #check,
            [info],
          ),
        )),
      ) as _i7.Future<_i3.ConnectivityState>);

  @override
  _i7.Future<bool> testConnection() => (super.noSuchMethod(
        Invocation.method(
          #testConnection,
          [],
        ),
        returnValue: _i7.Future<bool>.value(false),
        returnValueForMissingStub: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<_i6.AvailabilityInfo> testCloudAvailability() =>
      (super.noSuchMethod(
        Invocation.method(
          #testCloudAvailability,
          [],
        ),
        returnValue:
            _i7.Future<_i6.AvailabilityInfo>.value(_FakeAvailabilityInfo_5(
          this,
          Invocation.method(
            #testCloudAvailability,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i6.AvailabilityInfo>.value(_FakeAvailabilityInfo_5(
          this,
          Invocation.method(
            #testCloudAvailability,
            [],
          ),
        )),
      ) as _i7.Future<_i6.AvailabilityInfo>);
}
