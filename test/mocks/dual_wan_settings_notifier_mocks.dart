// Mocks generated by Mockito 5.4.5 from annotations
// in privacy_gui/test/mocks/mockito_specs/dual_wan_settings_notifier_spec.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:flutter_riverpod/flutter_riverpod.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:privacy_gui/page/dual/models/balance_ratio.dart' as _i7;
import 'package:privacy_gui/page/dual/models/logging_option.dart' as _i9;
import 'package:privacy_gui/page/dual/models/mode.dart' as _i6;
import 'package:privacy_gui/page/dual/models/wan_configuration.dart' as _i8;
import 'package:privacy_gui/page/dual/providers/dual_wan_settings_provider.dart'
    as _i4;
import 'package:privacy_gui/page/dual/providers/dual_wan_settings_state.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNotifierProviderRef_0<T> extends _i1.SmartFake
    implements _i2.NotifierProviderRef<T> {
  _FakeNotifierProviderRef_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDualWANSettingsState_1 extends _i1.SmartFake
    implements _i3.DualWANSettingsState {
  _FakeDualWANSettingsState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DualWANSettingsNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockDualWANSettingsNotifier extends _i2.Notifier<_i3.DualWANSettingsState> with _i1.Mock
    implements _i4.DualWANSettingsNotifier {
  @override
  _i2.NotifierProviderRef<_i3.DualWANSettingsState> get ref =>
      (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue: _FakeNotifierProviderRef_0<_i3.DualWANSettingsState>(
          this,
          Invocation.getter(#ref),
        ),
        returnValueForMissingStub:
            _FakeNotifierProviderRef_0<_i3.DualWANSettingsState>(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i2.NotifierProviderRef<_i3.DualWANSettingsState>);

  @override
  _i3.DualWANSettingsState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeDualWANSettingsState_1(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeDualWANSettingsState_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.DualWANSettingsState);

  @override
  set state(_i3.DualWANSettingsState? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.DualWANSettingsState build() => (super.noSuchMethod(
        Invocation.method(
          #build,
          [],
        ),
        returnValue: _FakeDualWANSettingsState_1(
          this,
          Invocation.method(
            #build,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeDualWANSettingsState_1(
          this,
          Invocation.method(
            #build,
            [],
          ),
        ),
      ) as _i3.DualWANSettingsState);

  @override
  _i5.Future<_i3.DualWANSettingsState> fetch([bool? fetchRemote = true]) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetch,
          [fetchRemote],
        ),
        returnValue: _i5.Future<_i3.DualWANSettingsState>.value(
            _FakeDualWANSettingsState_1(
          this,
          Invocation.method(
            #fetch,
            [fetchRemote],
          ),
        )),
        returnValueForMissingStub: _i5.Future<_i3.DualWANSettingsState>.value(
            _FakeDualWANSettingsState_1(
          this,
          Invocation.method(
            #fetch,
            [fetchRemote],
          ),
        )),
      ) as _i5.Future<_i3.DualWANSettingsState>);

  @override
  _i5.Future<_i3.DualWANSettingsState> save() => (super.noSuchMethod(
        Invocation.method(
          #save,
          [],
        ),
        returnValue: _i5.Future<_i3.DualWANSettingsState>.value(
            _FakeDualWANSettingsState_1(
          this,
          Invocation.method(
            #save,
            [],
          ),
        )),
        returnValueForMissingStub: _i5.Future<_i3.DualWANSettingsState>.value(
            _FakeDualWANSettingsState_1(
          this,
          Invocation.method(
            #save,
            [],
          ),
        )),
      ) as _i5.Future<_i3.DualWANSettingsState>);

  @override
  void updateDualWANEnable(bool? enable) => super.noSuchMethod(
        Invocation.method(
          #updateDualWANEnable,
          [enable],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateOperationMode(_i6.DualWANMode? mode) => super.noSuchMethod(
        Invocation.method(
          #updateOperationMode,
          [mode],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateBalanceRatio(_i7.DualWANBalanceRatio? ratio) => super.noSuchMethod(
        Invocation.method(
          #updateBalanceRatio,
          [ratio],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updatePrimaryWAN(_i8.DualWANConfiguration? wan) => super.noSuchMethod(
        Invocation.method(
          #updatePrimaryWAN,
          [wan],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateSecondaryWAN(_i8.DualWANConfiguration? wan) => super.noSuchMethod(
        Invocation.method(
          #updateSecondaryWAN,
          [wan],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateLoggingOptions(_i9.LoggingOptions? options) => super.noSuchMethod(
        Invocation.method(
          #updateLoggingOptions,
          [options],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void listenSelf(
    void Function(
      _i3.DualWANSettingsState?,
      _i3.DualWANSettingsState,
    )? listener, {
    void Function(
      Object,
      StackTrace,
    )? onError,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #listenSelf,
          [listener],
          {#onError: onError},
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool updateShouldNotify(
    _i3.DualWANSettingsState? previous,
    _i3.DualWANSettingsState? next,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            previous,
            next,
          ],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}
