// Mocks generated by Mockito 5.4.4 from annotations
// in privacy_gui/test/mocks/mockito_specs/dhcp_reservations_notifier_spec.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter_riverpod/flutter_riverpod.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:privacy_gui/core/jnap/models/lan_settings.dart' as _i5;
import 'package:privacy_gui/page/advanced_settings/local_network_settings/providers/dhcp_reservations_provider.dart'
    as _i4;
import 'package:privacy_gui/page/advanced_settings/local_network_settings/providers/dhcp_reservations_state.dart'
    as _i3;
import 'package:privacy_gui/page/instant_device/_instant_device.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAutoDisposeNotifierProviderRef_0<T> extends _i1.SmartFake
    implements _i2.AutoDisposeNotifierProviderRef<T> {
  _FakeAutoDisposeNotifierProviderRef_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDHCPReservationState_1 extends _i1.SmartFake
    implements _i3.DHCPReservationState {
  _FakeDHCPReservationState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DHCPReservationsNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockDHCPReservationsNotifier extends _i2.AutoDisposeNotifier<
        _i3.DHCPReservationState>
    with _i1.Mock
    implements _i4.DHCPReservationsNotifier {
  @override
  _i2.AutoDisposeNotifierProviderRef<_i3.DHCPReservationState> get ref =>
      (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue:
            _FakeAutoDisposeNotifierProviderRef_0<_i3.DHCPReservationState>(
          this,
          Invocation.getter(#ref),
        ),
        returnValueForMissingStub:
            _FakeAutoDisposeNotifierProviderRef_0<_i3.DHCPReservationState>(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i2.AutoDisposeNotifierProviderRef<_i3.DHCPReservationState>);

  @override
  _i3.DHCPReservationState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeDHCPReservationState_1(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeDHCPReservationState_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.DHCPReservationState);

  @override
  set state(_i3.DHCPReservationState? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.DHCPReservationState build() => (super.noSuchMethod(
        Invocation.method(
          #build,
          [],
        ),
        returnValue: _FakeDHCPReservationState_1(
          this,
          Invocation.method(
            #build,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeDHCPReservationState_1(
          this,
          Invocation.method(
            #build,
            [],
          ),
        ),
      ) as _i3.DHCPReservationState);

  @override
  _i3.DHCPReservationState setReservations(
          List<_i5.DHCPReservation>? reservedList) =>
      (super.noSuchMethod(
        Invocation.method(
          #setReservations,
          [reservedList],
        ),
        returnValue: _FakeDHCPReservationState_1(
          this,
          Invocation.method(
            #setReservations,
            [reservedList],
          ),
        ),
        returnValueForMissingStub: _FakeDHCPReservationState_1(
          this,
          Invocation.method(
            #setReservations,
            [reservedList],
          ),
        ),
      ) as _i3.DHCPReservationState);

  @override
  _i3.DHCPReservationState updateDevices(
          [List<_i6.DeviceListItem>? deviceList = const []]) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateDevices,
          [deviceList],
        ),
        returnValue: _FakeDHCPReservationState_1(
          this,
          Invocation.method(
            #updateDevices,
            [deviceList],
          ),
        ),
        returnValueForMissingStub: _FakeDHCPReservationState_1(
          this,
          Invocation.method(
            #updateDevices,
            [deviceList],
          ),
        ),
      ) as _i3.DHCPReservationState);

  @override
  bool isConflict(_i3.ReservedListItem? item) => (super.noSuchMethod(
        Invocation.method(
          #isConflict,
          [item],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void updateReservationItem(
    _i3.ReservedListItem? editedItem,
    String? name,
    String? ip,
    String? mac,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #updateReservationItem,
          [
            editedItem,
            name,
            ip,
            mac,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateReservations(
    _i3.ReservedListItem? item, [
    bool? isNew = false,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #updateReservations,
          [
            item,
            isNew,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void listenSelf(
    void Function(
      _i3.DHCPReservationState?,
      _i3.DHCPReservationState,
    )? listener, {
    void Function(
      Object,
      StackTrace,
    )? onError,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #listenSelf,
          [listener],
          {#onError: onError},
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool updateShouldNotify(
    _i3.DHCPReservationState? previous,
    _i3.DHCPReservationState? next,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            previous,
            next,
          ],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}
