// Mocks generated by Mockito 5.4.4 from annotations
// in privacy_gui/test/page/login/localizations/login_local_view_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:flutter_riverpod/flutter_riverpod.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:privacy_gui/core/cloud/model/cloud_session_model.dart' as _i9;
import 'package:privacy_gui/core/cloud/model/region_code.dart' as _i10;
import 'package:privacy_gui/core/jnap/models/device_info.dart' as _i4;
import 'package:privacy_gui/core/jnap/providers/dashboard_manager_provider.dart'
    as _i6;
import 'package:privacy_gui/core/jnap/providers/dashboard_manager_state.dart'
    as _i3;
import 'package:privacy_gui/core/jnap/providers/polling_provider.dart' as _i7;
import 'package:privacy_gui/providers/auth/auth_provider.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNotifierProviderRef_0<T> extends _i1.SmartFake
    implements _i2.NotifierProviderRef<T> {
  _FakeNotifierProviderRef_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDashboardManagerState_1 extends _i1.SmartFake
    implements _i3.DashboardManagerState {
  _FakeDashboardManagerState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNodeDeviceInfo_2 extends _i1.SmartFake
    implements _i4.NodeDeviceInfo {
  _FakeNodeDeviceInfo_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAsyncNotifierProviderRef_3<T> extends _i1.SmartFake
    implements _i2.AsyncNotifierProviderRef<T> {
  _FakeAsyncNotifierProviderRef_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAsyncValue_4<T> extends _i1.SmartFake implements _i2.AsyncValue<T> {
  _FakeAsyncValue_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthState_5 extends _i1.SmartFake implements _i5.AuthState {
  _FakeAuthState_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DashboardManagerNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockDashboardManagerNotifier extends _i2.Notifier<_i3.DashboardManagerState> with _i1.Mock
    implements _i6.DashboardManagerNotifier {
  @override
  _i2.NotifierProviderRef<_i3.DashboardManagerState> get ref =>
      (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue: _FakeNotifierProviderRef_0<_i3.DashboardManagerState>(
          this,
          Invocation.getter(#ref),
        ),
        returnValueForMissingStub:
            _FakeNotifierProviderRef_0<_i3.DashboardManagerState>(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i2.NotifierProviderRef<_i3.DashboardManagerState>);

  @override
  _i3.DashboardManagerState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeDashboardManagerState_1(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeDashboardManagerState_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.DashboardManagerState);

  @override
  set state(_i3.DashboardManagerState? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.DashboardManagerState build() => (super.noSuchMethod(
        Invocation.method(
          #build,
          [],
        ),
        returnValue: _FakeDashboardManagerState_1(
          this,
          Invocation.method(
            #build,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeDashboardManagerState_1(
          this,
          Invocation.method(
            #build,
            [],
          ),
        ),
      ) as _i3.DashboardManagerState);

  @override
  _i3.DashboardManagerState createState(
          {_i7.CoreTransactionData? pollingResult}) =>
      (super.noSuchMethod(
        Invocation.method(
          #createState,
          [],
          {#pollingResult: pollingResult},
        ),
        returnValue: _FakeDashboardManagerState_1(
          this,
          Invocation.method(
            #createState,
            [],
            {#pollingResult: pollingResult},
          ),
        ),
        returnValueForMissingStub: _FakeDashboardManagerState_1(
          this,
          Invocation.method(
            #createState,
            [],
            {#pollingResult: pollingResult},
          ),
        ),
      ) as _i3.DashboardManagerState);

  @override
  _i8.Future<void> saveSelectedNetwork(
    String? serialNumber,
    String? networkId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveSelectedNetwork,
          [
            serialNumber,
            networkId,
          ],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<_i4.NodeDeviceInfo> checkDeviceInfo(String? serialNumber) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkDeviceInfo,
          [serialNumber],
        ),
        returnValue: _i8.Future<_i4.NodeDeviceInfo>.value(_FakeNodeDeviceInfo_2(
          this,
          Invocation.method(
            #checkDeviceInfo,
            [serialNumber],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i4.NodeDeviceInfo>.value(_FakeNodeDeviceInfo_2(
          this,
          Invocation.method(
            #checkDeviceInfo,
            [serialNumber],
          ),
        )),
      ) as _i8.Future<_i4.NodeDeviceInfo>);

  @override
  bool isHealthCheckModuleSupported(String? module) => (super.noSuchMethod(
        Invocation.method(
          #isHealthCheckModuleSupported,
          [module],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool updateShouldNotify(
    _i3.DashboardManagerState? previous,
    _i3.DashboardManagerState? next,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            previous,
            next,
          ],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}

/// A class which mocks [AuthNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthNotifier extends _i2.AsyncNotifier<_i5.AuthState> with _i1.Mock implements _i5.AuthNotifier {
  @override
  _i2.AsyncNotifierProviderRef<_i5.AuthState> get ref => (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue: _FakeAsyncNotifierProviderRef_3<_i5.AuthState>(
          this,
          Invocation.getter(#ref),
        ),
        returnValueForMissingStub:
            _FakeAsyncNotifierProviderRef_3<_i5.AuthState>(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i2.AsyncNotifierProviderRef<_i5.AuthState>);

  @override
  _i2.AsyncValue<_i5.AuthState> get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeAsyncValue_4<_i5.AuthState>(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeAsyncValue_4<_i5.AuthState>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.AsyncValue<_i5.AuthState>);

  @override
  set state(_i2.AsyncValue<_i5.AuthState>? newState) => super.noSuchMethod(
        Invocation.setter(
          #state,
          newState,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<_i5.AuthState> get future => (super.noSuchMethod(
        Invocation.getter(#future),
        returnValue: _i8.Future<_i5.AuthState>.value(_FakeAuthState_5(
          this,
          Invocation.getter(#future),
        )),
        returnValueForMissingStub:
            _i8.Future<_i5.AuthState>.value(_FakeAuthState_5(
          this,
          Invocation.getter(#future),
        )),
      ) as _i8.Future<_i5.AuthState>);

  @override
  _i8.Future<_i5.AuthState> build() => (super.noSuchMethod(
        Invocation.method(
          #build,
          [],
        ),
        returnValue: _i8.Future<_i5.AuthState>.value(_FakeAuthState_5(
          this,
          Invocation.method(
            #build,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i5.AuthState>.value(_FakeAuthState_5(
          this,
          Invocation.method(
            #build,
            [],
          ),
        )),
      ) as _i8.Future<_i5.AuthState>);

  @override
  _i8.Future<_i5.AuthState?> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i8.Future<_i5.AuthState?>.value(),
        returnValueForMissingStub: _i8.Future<_i5.AuthState?>.value(),
      ) as _i8.Future<_i5.AuthState?>);

  @override
  _i8.Future<_i9.SessionToken?> checkSessionToken() => (super.noSuchMethod(
        Invocation.method(
          #checkSessionToken,
          [],
        ),
        returnValue: _i8.Future<_i9.SessionToken?>.value(),
        returnValueForMissingStub: _i8.Future<_i9.SessionToken?>.value(),
      ) as _i8.Future<_i9.SessionToken?>);

  @override
  _i8.Future<_i9.SessionToken?> handleSessionTokenError(
    Object? error,
    StackTrace? trace,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleSessionTokenError,
          [
            error,
            trace,
          ],
        ),
        returnValue: _i8.Future<_i9.SessionToken?>.value(),
        returnValueForMissingStub: _i8.Future<_i9.SessionToken?>.value(),
      ) as _i8.Future<_i9.SessionToken?>);

  @override
  _i8.Future<_i9.SessionToken?> refreshToken(String? refreshToken) =>
      (super.noSuchMethod(
        Invocation.method(
          #refreshToken,
          [refreshToken],
        ),
        returnValue: _i8.Future<_i9.SessionToken?>.value(),
        returnValueForMissingStub: _i8.Future<_i9.SessionToken?>.value(),
      ) as _i8.Future<_i9.SessionToken?>);

  @override
  _i8.Future<dynamic> cloudLogin({
    required String? username,
    required String? password,
    _i9.SessionToken? sessionToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #cloudLogin,
          [],
          {
            #username: username,
            #password: password,
            #sessionToken: sessionToken,
          },
        ),
        returnValue: _i8.Future<dynamic>.value(),
        returnValueForMissingStub: _i8.Future<dynamic>.value(),
      ) as _i8.Future<dynamic>);

  @override
  _i8.Future<_i5.AuthState> updateCredientials({
    _i9.SessionToken? sessionToken,
    String? username,
    String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateCredientials,
          [],
          {
            #sessionToken: sessionToken,
            #username: username,
            #password: password,
          },
        ),
        returnValue: _i8.Future<_i5.AuthState>.value(_FakeAuthState_5(
          this,
          Invocation.method(
            #updateCredientials,
            [],
            {
              #sessionToken: sessionToken,
              #username: username,
              #password: password,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i5.AuthState>.value(_FakeAuthState_5(
          this,
          Invocation.method(
            #updateCredientials,
            [],
            {
              #sessionToken: sessionToken,
              #username: username,
              #password: password,
            },
          ),
        )),
      ) as _i8.Future<_i5.AuthState>);

  @override
  _i8.Future<dynamic> localLogin(
    String? password, {
    bool? pnp = false,
    bool? guardError = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #localLogin,
          [password],
          {
            #pnp: pnp,
            #guardError: guardError,
          },
        ),
        returnValue: _i8.Future<dynamic>.value(),
        returnValueForMissingStub: _i8.Future<dynamic>.value(),
      ) as _i8.Future<dynamic>);

  @override
  _i8.Future<void> getPasswordHint() => (super.noSuchMethod(
        Invocation.method(
          #getPasswordHint,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> createAdminPassword(
    String? password,
    String? hint,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createAdminPassword,
          [
            password,
            hint,
          ],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<dynamic> logout() => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValue: _i8.Future<dynamic>.value(),
        returnValueForMissingStub: _i8.Future<dynamic>.value(),
      ) as _i8.Future<dynamic>);

  @override
  bool isCloudLogin() => (super.noSuchMethod(
        Invocation.method(
          #isCloudLogin,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i8.Future<List<_i10.RegionCode>> fetchRegionCodes() => (super.noSuchMethod(
        Invocation.method(
          #fetchRegionCodes,
          [],
        ),
        returnValue:
            _i8.Future<List<_i10.RegionCode>>.value(<_i10.RegionCode>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i10.RegionCode>>.value(<_i10.RegionCode>[]),
      ) as _i8.Future<List<_i10.RegionCode>>);

  @override
  _i8.Future<_i5.AuthState> update(
    _i8.FutureOr<_i5.AuthState> Function(_i5.AuthState)? cb, {
    _i8.FutureOr<_i5.AuthState> Function(
      Object,
      StackTrace,
    )? onError,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [cb],
          {#onError: onError},
        ),
        returnValue: _i8.Future<_i5.AuthState>.value(_FakeAuthState_5(
          this,
          Invocation.method(
            #update,
            [cb],
            {#onError: onError},
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i5.AuthState>.value(_FakeAuthState_5(
          this,
          Invocation.method(
            #update,
            [cb],
            {#onError: onError},
          ),
        )),
      ) as _i8.Future<_i5.AuthState>);

  @override
  bool updateShouldNotify(
    _i2.AsyncValue<_i5.AuthState>? previous,
    _i2.AsyncValue<_i5.AuthState>? next,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            previous,
            next,
          ],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}
