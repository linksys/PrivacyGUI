// Mocks generated by Mockito 5.4.4 from annotations
// in privacy_gui/test/page/login/localizations/login_local_view_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i12;

import 'package:flutter_riverpod/flutter_riverpod.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:privacy_gui/core/jnap/actions/better_action.dart' as _i14;
import 'package:privacy_gui/core/jnap/actions/jnap_transaction.dart' as _i16;
import 'package:privacy_gui/core/jnap/command/base_command.dart' as _i9;
import 'package:privacy_gui/core/jnap/command/http/base_http_command.dart'
    as _i7;
import 'package:privacy_gui/core/jnap/jnap_command_executor_mixin.dart' as _i5;
import 'package:privacy_gui/core/jnap/models/device_info.dart' as _i4;
import 'package:privacy_gui/core/jnap/providers/dashboard_manager_provider.dart'
    as _i10;
import 'package:privacy_gui/core/jnap/providers/dashboard_manager_state.dart'
    as _i3;
import 'package:privacy_gui/core/jnap/providers/polling_provider.dart' as _i11;
import 'package:privacy_gui/core/jnap/providers/side_effect_provider.dart'
    as _i15;
import 'package:privacy_gui/core/jnap/result/jnap_result.dart' as _i6;
import 'package:privacy_gui/core/jnap/router_repository.dart' as _i13;
import 'package:privacy_gui/core/jnap/spec/jnap_spec.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNotifierProviderRef_0<T> extends _i1.SmartFake
    implements _i2.NotifierProviderRef<T> {
  _FakeNotifierProviderRef_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDashboardManagerState_1 extends _i1.SmartFake
    implements _i3.DashboardManagerState {
  _FakeDashboardManagerState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNodeDeviceInfo_2 extends _i1.SmartFake
    implements _i4.NodeDeviceInfo {
  _FakeNodeDeviceInfo_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRef_3<State extends Object?> extends _i1.SmartFake
    implements _i2.Ref<State> {
  _FakeRef_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeJNAPCommandExecutor_4<R> extends _i1.SmartFake
    implements _i5.JNAPCommandExecutor<R> {
  _FakeJNAPCommandExecutor_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeJNAPSuccess_5 extends _i1.SmartFake implements _i6.JNAPSuccess {
  _FakeJNAPSuccess_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeJNAPTransactionSuccessWrap_6 extends _i1.SmartFake
    implements _i6.JNAPTransactionSuccessWrap {
  _FakeJNAPTransactionSuccessWrap_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTransactionHttpCommand_7 extends _i1.SmartFake
    implements _i7.TransactionHttpCommand {
  _FakeTransactionHttpCommand_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBaseCommand_8<R, S extends _i8.JNAPSpec<dynamic>>
    extends _i1.SmartFake implements _i9.BaseCommand<R, S> {
  _FakeBaseCommand_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DashboardManagerNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockDashboardManagerNotifier extends _i2.Notifier<_i3.DashboardManagerState> with _i1.Mock
    implements _i10.DashboardManagerNotifier {
  @override
  _i2.NotifierProviderRef<_i3.DashboardManagerState> get ref =>
      (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue: _FakeNotifierProviderRef_0<_i3.DashboardManagerState>(
          this,
          Invocation.getter(#ref),
        ),
        returnValueForMissingStub:
            _FakeNotifierProviderRef_0<_i3.DashboardManagerState>(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i2.NotifierProviderRef<_i3.DashboardManagerState>);

  @override
  _i3.DashboardManagerState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeDashboardManagerState_1(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeDashboardManagerState_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.DashboardManagerState);

  @override
  set state(_i3.DashboardManagerState? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.DashboardManagerState build() => (super.noSuchMethod(
        Invocation.method(
          #build,
          [],
        ),
        returnValue: _FakeDashboardManagerState_1(
          this,
          Invocation.method(
            #build,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeDashboardManagerState_1(
          this,
          Invocation.method(
            #build,
            [],
          ),
        ),
      ) as _i3.DashboardManagerState);

  @override
  _i3.DashboardManagerState createState(
          {_i11.CoreTransactionData? pollingResult}) =>
      (super.noSuchMethod(
        Invocation.method(
          #createState,
          [],
          {#pollingResult: pollingResult},
        ),
        returnValue: _FakeDashboardManagerState_1(
          this,
          Invocation.method(
            #createState,
            [],
            {#pollingResult: pollingResult},
          ),
        ),
        returnValueForMissingStub: _FakeDashboardManagerState_1(
          this,
          Invocation.method(
            #createState,
            [],
            {#pollingResult: pollingResult},
          ),
        ),
      ) as _i3.DashboardManagerState);

  @override
  _i12.Future<void> saveSelectedNetwork(
    String? serialNumber,
    String? networkId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveSelectedNetwork,
          [
            serialNumber,
            networkId,
          ],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<_i4.NodeDeviceInfo> checkDeviceInfo(String? serialNumber) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkDeviceInfo,
          [serialNumber],
        ),
        returnValue:
            _i12.Future<_i4.NodeDeviceInfo>.value(_FakeNodeDeviceInfo_2(
          this,
          Invocation.method(
            #checkDeviceInfo,
            [serialNumber],
          ),
        )),
        returnValueForMissingStub:
            _i12.Future<_i4.NodeDeviceInfo>.value(_FakeNodeDeviceInfo_2(
          this,
          Invocation.method(
            #checkDeviceInfo,
            [serialNumber],
          ),
        )),
      ) as _i12.Future<_i4.NodeDeviceInfo>);

  @override
  bool isHealthCheckModuleSupported(String? module) => (super.noSuchMethod(
        Invocation.method(
          #isHealthCheckModuleSupported,
          [module],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool updateShouldNotify(
    _i3.DashboardManagerState? previous,
    _i3.DashboardManagerState? next,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            previous,
            next,
          ],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}

/// A class which mocks [RouterRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRouterRepository extends _i1.Mock implements _i13.RouterRepository {
  @override
  _i2.Ref<Object?> get ref => (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue: _FakeRef_3<Object?>(
          this,
          Invocation.getter(#ref),
        ),
        returnValueForMissingStub: _FakeRef_3<Object?>(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i2.Ref<Object?>);

  @override
  _i5.JNAPCommandExecutor<dynamic> get executor => (super.noSuchMethod(
        Invocation.getter(#executor),
        returnValue: _FakeJNAPCommandExecutor_4<dynamic>(
          this,
          Invocation.getter(#executor),
        ),
        returnValueForMissingStub: _FakeJNAPCommandExecutor_4<dynamic>(
          this,
          Invocation.getter(#executor),
        ),
      ) as _i5.JNAPCommandExecutor<dynamic>);

  @override
  set enableBTSetup(bool? isEnable) => super.noSuchMethod(
        Invocation.setter(
          #enableBTSetup,
          isEnable,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isEnableBTSetup => (super.noSuchMethod(
        Invocation.getter(#isEnableBTSetup),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i12.Future<_i6.JNAPSuccess> send(
    _i14.JNAPAction? action, {
    Map<String, dynamic>? data = const {},
    Map<String, String>? extraHeaders = const {},
    bool? auth = false,
    _i13.CommandType? type,
    bool? fetchRemote = false,
    _i9.CacheLevel? cacheLevel,
    int? timeoutMs = 10000,
    int? retries = 1,
    _i15.JNAPSideEffectOverrides? sideEffectOverrides,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [action],
          {
            #data: data,
            #extraHeaders: extraHeaders,
            #auth: auth,
            #type: type,
            #fetchRemote: fetchRemote,
            #cacheLevel: cacheLevel,
            #timeoutMs: timeoutMs,
            #retries: retries,
            #sideEffectOverrides: sideEffectOverrides,
          },
        ),
        returnValue: _i12.Future<_i6.JNAPSuccess>.value(_FakeJNAPSuccess_5(
          this,
          Invocation.method(
            #send,
            [action],
            {
              #data: data,
              #extraHeaders: extraHeaders,
              #auth: auth,
              #type: type,
              #fetchRemote: fetchRemote,
              #cacheLevel: cacheLevel,
              #timeoutMs: timeoutMs,
              #retries: retries,
              #sideEffectOverrides: sideEffectOverrides,
            },
          ),
        )),
        returnValueForMissingStub:
            _i12.Future<_i6.JNAPSuccess>.value(_FakeJNAPSuccess_5(
          this,
          Invocation.method(
            #send,
            [action],
            {
              #data: data,
              #extraHeaders: extraHeaders,
              #auth: auth,
              #type: type,
              #fetchRemote: fetchRemote,
              #cacheLevel: cacheLevel,
              #timeoutMs: timeoutMs,
              #retries: retries,
              #sideEffectOverrides: sideEffectOverrides,
            },
          ),
        )),
      ) as _i12.Future<_i6.JNAPSuccess>);

  @override
  _i12.Future<_i6.JNAPTransactionSuccessWrap> transaction(
    _i16.JNAPTransactionBuilder? builder, {
    bool? fetchRemote = false,
    _i9.CacheLevel? cacheLevel = _i9.CacheLevel.localCached,
    int? timeoutMs = 10000,
    int? retries = 1,
    _i15.JNAPSideEffectOverrides? sideEffectOverrides,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #transaction,
          [builder],
          {
            #fetchRemote: fetchRemote,
            #cacheLevel: cacheLevel,
            #timeoutMs: timeoutMs,
            #retries: retries,
            #sideEffectOverrides: sideEffectOverrides,
          },
        ),
        returnValue: _i12.Future<_i6.JNAPTransactionSuccessWrap>.value(
            _FakeJNAPTransactionSuccessWrap_6(
          this,
          Invocation.method(
            #transaction,
            [builder],
            {
              #fetchRemote: fetchRemote,
              #cacheLevel: cacheLevel,
              #timeoutMs: timeoutMs,
              #retries: retries,
              #sideEffectOverrides: sideEffectOverrides,
            },
          ),
        )),
        returnValueForMissingStub:
            _i12.Future<_i6.JNAPTransactionSuccessWrap>.value(
                _FakeJNAPTransactionSuccessWrap_6(
          this,
          Invocation.method(
            #transaction,
            [builder],
            {
              #fetchRemote: fetchRemote,
              #cacheLevel: cacheLevel,
              #timeoutMs: timeoutMs,
              #retries: retries,
              #sideEffectOverrides: sideEffectOverrides,
            },
          ),
        )),
      ) as _i12.Future<_i6.JNAPTransactionSuccessWrap>);

  @override
  _i12.Future<_i7.TransactionHttpCommand> createTransaction(
    List<Map<String, dynamic>>? payload, {
    bool? needAuth = false,
    required List<_i14.JNAPAction>? actions,
    bool? fetchRemote = false,
    _i9.CacheLevel? cacheLevel = _i9.CacheLevel.localCached,
    int? timeoutMs = 10000,
    int? retries = 1,
    _i13.CommandType? type,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createTransaction,
          [payload],
          {
            #needAuth: needAuth,
            #actions: actions,
            #fetchRemote: fetchRemote,
            #cacheLevel: cacheLevel,
            #timeoutMs: timeoutMs,
            #retries: retries,
            #type: type,
          },
        ),
        returnValue: _i12.Future<_i7.TransactionHttpCommand>.value(
            _FakeTransactionHttpCommand_7(
          this,
          Invocation.method(
            #createTransaction,
            [payload],
            {
              #needAuth: needAuth,
              #actions: actions,
              #fetchRemote: fetchRemote,
              #cacheLevel: cacheLevel,
              #timeoutMs: timeoutMs,
              #retries: retries,
              #type: type,
            },
          ),
        )),
        returnValueForMissingStub:
            _i12.Future<_i7.TransactionHttpCommand>.value(
                _FakeTransactionHttpCommand_7(
          this,
          Invocation.method(
            #createTransaction,
            [payload],
            {
              #needAuth: needAuth,
              #actions: actions,
              #fetchRemote: fetchRemote,
              #cacheLevel: cacheLevel,
              #timeoutMs: timeoutMs,
              #retries: retries,
              #type: type,
            },
          ),
        )),
      ) as _i12.Future<_i7.TransactionHttpCommand>);

  @override
  _i12.Future<
      _i9
      .BaseCommand<_i6.JNAPResult, _i8.JNAPCommandSpec<dynamic>>> createCommand(
    String? action, {
    Map<String, dynamic>? data = const {},
    Map<String, String>? extraHeaders = const {},
    bool? needAuth = false,
    _i13.CommandType? type,
    bool? fetchRemote = false,
    _i9.CacheLevel? cacheLevel = _i9.CacheLevel.localCached,
    int? timeoutMs = 10000,
    int? retries = 1,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createCommand,
          [action],
          {
            #data: data,
            #extraHeaders: extraHeaders,
            #needAuth: needAuth,
            #type: type,
            #fetchRemote: fetchRemote,
            #cacheLevel: cacheLevel,
            #timeoutMs: timeoutMs,
            #retries: retries,
          },
        ),
        returnValue: _i12.Future<
                _i9.BaseCommand<_i6.JNAPResult,
                    _i8.JNAPCommandSpec<dynamic>>>.value(
            _FakeBaseCommand_8<_i6.JNAPResult, _i8.JNAPCommandSpec<dynamic>>(
          this,
          Invocation.method(
            #createCommand,
            [action],
            {
              #data: data,
              #extraHeaders: extraHeaders,
              #needAuth: needAuth,
              #type: type,
              #fetchRemote: fetchRemote,
              #cacheLevel: cacheLevel,
              #timeoutMs: timeoutMs,
              #retries: retries,
            },
          ),
        )),
        returnValueForMissingStub: _i12.Future<
                _i9.BaseCommand<_i6.JNAPResult,
                    _i8.JNAPCommandSpec<dynamic>>>.value(
            _FakeBaseCommand_8<_i6.JNAPResult, _i8.JNAPCommandSpec<dynamic>>(
          this,
          Invocation.method(
            #createCommand,
            [action],
            {
              #data: data,
              #extraHeaders: extraHeaders,
              #needAuth: needAuth,
              #type: type,
              #fetchRemote: fetchRemote,
              #cacheLevel: cacheLevel,
              #timeoutMs: timeoutMs,
              #retries: retries,
            },
          ),
        )),
      ) as _i12.Future<
          _i9.BaseCommand<_i6.JNAPResult, _i8.JNAPCommandSpec<dynamic>>>);

  @override
  _i12.Stream<_i6.JNAPResult> scheduledCommand({
    required _i14.JNAPAction? action,
    int? retryDelayInMilliSec = 5000,
    int? maxRetry = 10,
    int? firstDelayInMilliSec = 3000,
    Map<String, dynamic>? data = const {},
    bool Function(_i6.JNAPResult)? condition,
    dynamic Function()? onCompleted,
    bool? auth = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #scheduledCommand,
          [],
          {
            #action: action,
            #retryDelayInMilliSec: retryDelayInMilliSec,
            #maxRetry: maxRetry,
            #firstDelayInMilliSec: firstDelayInMilliSec,
            #data: data,
            #condition: condition,
            #onCompleted: onCompleted,
            #auth: auth,
          },
        ),
        returnValue: _i12.Stream<_i6.JNAPResult>.empty(),
        returnValueForMissingStub: _i12.Stream<_i6.JNAPResult>.empty(),
      ) as _i12.Stream<_i6.JNAPResult>);
}
